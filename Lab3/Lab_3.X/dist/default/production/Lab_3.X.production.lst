

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Fri Feb 12 01:34:24 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	intentry,global,class=CODE,delta=2
    11                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 2.20
    15                           ; Generated 12/02/2020 GMT
    16                           ; 
    17                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F887 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  008F                     	;# 
    93  0090                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0093                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0095                     	;# 
   101  0096                     	;# 
   102  0097                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009A                     	;# 
   106  009B                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  0105                     	;# 
   112  0107                     	;# 
   113  0108                     	;# 
   114  0109                     	;# 
   115  010C                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  0185                     	;# 
   121  0187                     	;# 
   122  0188                     	;# 
   123  0189                     	;# 
   124  018C                     	;# 
   125  018D                     	;# 
   126  0000                     	;# 
   127  0001                     	;# 
   128  0002                     	;# 
   129  0003                     	;# 
   130  0004                     	;# 
   131  0005                     	;# 
   132  0006                     	;# 
   133  0007                     	;# 
   134  0008                     	;# 
   135  0009                     	;# 
   136  000A                     	;# 
   137  000B                     	;# 
   138  000C                     	;# 
   139  000D                     	;# 
   140  000E                     	;# 
   141  000E                     	;# 
   142  000F                     	;# 
   143  0010                     	;# 
   144  0011                     	;# 
   145  0012                     	;# 
   146  0013                     	;# 
   147  0014                     	;# 
   148  0015                     	;# 
   149  0015                     	;# 
   150  0016                     	;# 
   151  0017                     	;# 
   152  0018                     	;# 
   153  0019                     	;# 
   154  001A                     	;# 
   155  001B                     	;# 
   156  001B                     	;# 
   157  001C                     	;# 
   158  001D                     	;# 
   159  001E                     	;# 
   160  001F                     	;# 
   161  0081                     	;# 
   162  0085                     	;# 
   163  0086                     	;# 
   164  0087                     	;# 
   165  0088                     	;# 
   166  0089                     	;# 
   167  008C                     	;# 
   168  008D                     	;# 
   169  008E                     	;# 
   170  008F                     	;# 
   171  0090                     	;# 
   172  0091                     	;# 
   173  0092                     	;# 
   174  0093                     	;# 
   175  0093                     	;# 
   176  0093                     	;# 
   177  0094                     	;# 
   178  0095                     	;# 
   179  0096                     	;# 
   180  0097                     	;# 
   181  0098                     	;# 
   182  0099                     	;# 
   183  009A                     	;# 
   184  009B                     	;# 
   185  009C                     	;# 
   186  009D                     	;# 
   187  009E                     	;# 
   188  009F                     	;# 
   189  0105                     	;# 
   190  0107                     	;# 
   191  0108                     	;# 
   192  0109                     	;# 
   193  010C                     	;# 
   194  010C                     	;# 
   195  010D                     	;# 
   196  010E                     	;# 
   197  010F                     	;# 
   198  0185                     	;# 
   199  0187                     	;# 
   200  0188                     	;# 
   201  0189                     	;# 
   202  018C                     	;# 
   203  018D                     	;# 
   204  001E                     _ADRESH	set	30
   205  000C                     _PIR1bits	set	12
   206  0009                     _PORTE	set	9
   207  0007                     _PORTC	set	7
   208  0006                     _PORTB	set	6
   209  0008                     _PORTD	set	8
   210  000B                     _INTCONbits	set	11
   211  001F                     _ADCON0bits	set	31
   212  0085                     _TRISAbits	set	133
   213  0085                     _TRISA	set	133
   214  0089                     _TRISE	set	137
   215  0088                     _TRISD	set	136
   216  0086                     _TRISB	set	134
   217  0087                     _TRISC	set	135
   218  0188                     _ANSELbits	set	392
   219  0189                     _ANSELH	set	393
   220  0188                     _ANSEL	set	392
   221                           
   222                           	psect	cinit
   223  0000'                    start_initialization:	
   224                           ; #config settings
   225                           
   226  0000'                    __initialization:
   227                           
   228                           ; Clear objects allocated to COMMON
   229  0000' 0180'              	clrf	__pbssCOMMON& (0+127)
   230  0001' 0180'              	clrf	(__pbssCOMMON+1)& (0+127)
   231  0002' 0180'              	clrf	(__pbssCOMMON+2)& (0+127)
   232  0003' 0180'              	clrf	(__pbssCOMMON+3)& (0+127)
   233  0004'                    end_of_initialization:	
   234                           ;End of C runtime variable initialization code
   235                           
   236  0004'                    __end_of__initialization:
   237  0004' 0183               	clrf	3
   238  0005' 120A' 118A' 2800'  	ljmp	_main	;jump to C main() function
   239                           
   240                           	psect	bssCOMMON
   241  0000'                    __pbssCOMMON:
   242  0000'                    _adc_fin:
   243  0000'                    	ds	1
   244  0001'                    _val_pot2:
   245  0001'                    	ds	1
   246  0002'                    _val_pot1:
   247  0002'                    	ds	1
   248  0003'                    _pot:
   249  0003'                    	ds	1
   250                           
   251                           	psect	cstackCOMMON
   252  0000'                    __pcstackCOMMON:
   253  0000'                    ?_config:
   254  0000'                    ?_conf_ch:	
   255                           ; 1 bytes @ 0x0
   256                           
   257  0000'                    ??_conf_ch:	
   258                           ; 1 bytes @ 0x0
   259                           
   260  0000'                    ?_main:	
   261                           ; 1 bytes @ 0x0
   262                           
   263  0000'                    ?_ISR:	
   264                           ; 1 bytes @ 0x0
   265                           
   266  0000'                    ??_ISR:	
   267                           ; 1 bytes @ 0x0
   268                           
   269  0000'                    _conf_ch$0:	
   270                           ; 1 bytes @ 0x0
   271                           
   272                           
   273                           ; 2 bytes @ 0x0
   274  0000'                    	ds	2
   275  0002'                    ??_config:
   276  0002'                    ??_main:	
   277                           ; 1 bytes @ 0x2
   278                           
   279                           
   280                           ; 1 bytes @ 0x2
   281  0002'                    	ds	2
   282                           
   283                           	psect	maintext
   284  0000'                    __pmaintext:	
   285 ;;
   286 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   287 ;;
   288 ;; *************** function _main *****************
   289 ;; Defined at:
   290 ;;		line 50 in file "main.c"
   291 ;; Parameters:    Size  Location     Type
   292 ;;		None
   293 ;; Auto vars:     Size  Location     Type
   294 ;;		None
   295 ;; Return value:  Size  Location     Type
   296 ;;                  1    wreg      void 
   297 ;; Registers used:
   298 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
   299 ;; Tracked objects:
   300 ;;		On entry : B00/0
   301 ;;		On exit  : 0/0
   302 ;;		Unchanged: 0/0
   303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   304 ;;      Params:         0       0       0       0       0
   305 ;;      Locals:         0       0       0       0       0
   306 ;;      Temps:          2       0       0       0       0
   307 ;;      Totals:         2       0       0       0       0
   308 ;;Total ram usage:        2 bytes
   309 ;; Hardware stack levels required when called:    2
   310 ;; This function calls:
   311 ;;		_conf_ch
   312 ;;		_config
   313 ;; This function is called by:
   314 ;;		Startup code after reset
   315 ;; This function uses a non-reentrant model
   316 ;;
   317                           
   318                           
   319                           ;psect for function _main
   320  0000'                    _main:
   321  0000'                    l704:	
   322                           ;incstack = 0
   323                           ; Regs used in _main: [allreg]
   324                           
   325                           
   326                           ;main.c: 51:     config();
   327  0000' 120A' 118A' 2000' 120A' 118A' 	fcall	_config
   328  0005'                    l706:
   329                           
   330                           ;main.c: 52:     adc_fin = 0;
   331  0005' 0180'              	clrf	_adc_fin
   332  0006'                    l708:
   333                           
   334                           ;main.c: 54:         if (adc_fin){
   335  0006' 0800'              	movf	_adc_fin,w
   336  0007' 1903               	btfsc	3,2
   337  0008' 2800'              	goto	u51
   338  0009' 2800'              	goto	u50
   339  000A'                    u51:
   340  000A' 2800'              	goto	l708
   341  000B'                    u50:
   342  000B'                    l710:
   343                           
   344                           ;main.c: 55:             adc_fin = 1;
   345  000B' 0180'              	clrf	_adc_fin
   346  000C' 0A80'              	incf	_adc_fin,f
   347  000D'                    l712:
   348                           
   349                           ;main.c: 56:         if (pot == 0) {
   350  000D' 0803'              	movf	_pot,w
   351  000E' 1D03               	btfss	3,2
   352  000F' 2800'              	goto	u61
   353  0010' 2800'              	goto	u60
   354  0011'                    u61:
   355  0011' 2800'              	goto	l720
   356  0012'                    u60:
   357  0012'                    l714:
   358                           
   359                           ;main.c: 57:             conf_ch(0);
   360  0012' 3000               	movlw	0
   361  0013' 0080'              	movwf	_conf_ch$0
   362  0014' 0081'              	movwf	_conf_ch$0+1
   363  0015' 120A' 118A' 2000' 120A' 118A' 	fcall	_conf_ch
   364  001A'                    l716:
   365                           
   366                           ;main.c: 58:             _delay((unsigned long)((10)*((8000000)/4000.0)));
   367  001A' 301A               	movlw	26
   368  001B' 0083'              	movwf	??_main+1
   369  001C' 30F8               	movlw	248
   370  001D' 0082'              	movwf	??_main
   371  001E'                    u87:
   372  001E' 0B82'              	decfsz	??_main,f
   373  001F' 2800'              	goto	u87
   374  0020' 0B83'              	decfsz	??_main+1,f
   375  0021' 2800'              	goto	u87
   376  0022' 0000               	nop
   377  0023'                    l718:
   378                           
   379                           ;main.c: 59:             ADCON0bits.GO = 1;
   380  0023' 1283               	bcf	3,5	;RP0=0, select bank0
   381  0024' 1303               	bcf	3,6	;RP1=0, select bank0
   382  0025' 149F               	bsf	31,1	;volatile
   383  0026'                    l720:
   384                           
   385                           ;main.c: 62:         if (pot == 1) {
   386  0026' 0303'              	decf	_pot,w
   387  0027' 1D03               	btfss	3,2
   388  0028' 2800'              	goto	u71
   389  0029' 2800'              	goto	u70
   390  002A'                    u71:
   391  002A' 2800'              	goto	l708
   392  002B'                    u70:
   393  002B'                    l722:
   394                           
   395                           ;main.c: 63:             conf_ch(1);
   396  002B' 3001               	movlw	1
   397  002C' 0080'              	movwf	_conf_ch$0
   398  002D' 3000               	movlw	0
   399  002E' 0081'              	movwf	_conf_ch$0+1
   400  002F' 120A' 118A' 2000' 120A' 118A' 	fcall	_conf_ch
   401  0034'                    l724:
   402                           
   403                           ;main.c: 64:             _delay((unsigned long)((10)*((8000000)/4000.0)));
   404  0034' 301A               	movlw	26
   405  0035' 0083'              	movwf	??_main+1
   406  0036' 30F8               	movlw	248
   407  0037' 0082'              	movwf	??_main
   408  0038'                    u97:
   409  0038' 0B82'              	decfsz	??_main,f
   410  0039' 2800'              	goto	u97
   411  003A' 0B83'              	decfsz	??_main+1,f
   412  003B' 2800'              	goto	u97
   413  003C' 0000               	nop
   414  003D'                    l726:
   415                           
   416                           ;main.c: 65:             ADCON0bits.GO = 1;
   417  003D' 1283               	bcf	3,5	;RP0=0, select bank0
   418  003E' 1303               	bcf	3,6	;RP1=0, select bank0
   419  003F' 149F               	bsf	31,1	;volatile
   420  0040' 2800'              	goto	l708
   421  0041' 120A' 118A' 2800'  	ljmp	start
   422  0044'                    __end_of_main:
   423                           
   424                           	psect	text1
   425  0000'                    __ptext1:	
   426 ;; *************** function _config *****************
   427 ;; Defined at:
   428 ;;		line 74 in file "main.c"
   429 ;; Parameters:    Size  Location     Type
   430 ;;		None
   431 ;; Auto vars:     Size  Location     Type
   432 ;;		None
   433 ;; Return value:  Size  Location     Type
   434 ;;                  1    wreg      void 
   435 ;; Registers used:
   436 ;;		status,2
   437 ;; Tracked objects:
   438 ;;		On entry : 0/0
   439 ;;		On exit  : 0/0
   440 ;;		Unchanged: 0/0
   441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   442 ;;      Params:         0       0       0       0       0
   443 ;;      Locals:         0       0       0       0       0
   444 ;;      Temps:          0       0       0       0       0
   445 ;;      Totals:         0       0       0       0       0
   446 ;;Total ram usage:        0 bytes
   447 ;; Hardware stack levels used:    1
   448 ;; Hardware stack levels required when called:    1
   449 ;; This function calls:
   450 ;;		Nothing
   451 ;; This function is called by:
   452 ;;		_main
   453 ;; This function uses a non-reentrant model
   454 ;;
   455                           
   456                           
   457                           ;psect for function _config
   458  0000'                    _config:
   459  0000'                    l660:	
   460                           ;incstack = 0
   461                           ; Regs used in _config: [status,2]
   462                           
   463                           
   464                           ;main.c: 76:     INTCONbits.GIE = 1;
   465  0000' 178B               	bsf	11,7	;volatile
   466                           
   467                           ;main.c: 77:     INTCONbits.PEIE = 1;
   468  0001' 170B               	bsf	11,6	;volatile
   469  0002'                    l662:
   470                           
   471                           ;main.c: 78:     ANSEL = 0;
   472  0002' 1683               	bsf	3,5	;RP0=1, select bank3
   473  0003' 1703               	bsf	3,6	;RP1=1, select bank3
   474  0004' 0188               	clrf	8	;volatile
   475                           
   476                           ;main.c: 79:     ANSELH = 0;
   477  0005' 0189               	clrf	9	;volatile
   478  0006'                    l664:
   479                           
   480                           ;main.c: 80:     ANSELbits.ANS0 = 1;
   481  0006' 1408               	bsf	8,0	;volatile
   482  0007'                    l666:
   483                           
   484                           ;main.c: 81:     ANSELbits.ANS1 = 1;
   485  0007' 1488               	bsf	8,1	;volatile
   486                           
   487                           ;main.c: 82:     TRISC = 0x00;
   488  0008' 1683               	bsf	3,5	;RP0=1, select bank1
   489  0009' 1303               	bcf	3,6	;RP1=0, select bank1
   490  000A' 0187               	clrf	7	;volatile
   491                           
   492                           ;main.c: 83:     TRISB = 0x00;
   493  000B' 0186               	clrf	6	;volatile
   494                           
   495                           ;main.c: 84:     TRISD = 0x00;
   496  000C' 0188               	clrf	8	;volatile
   497                           
   498                           ;main.c: 85:     TRISE = 0x00;
   499  000D' 0189               	clrf	9	;volatile
   500                           
   501                           ;main.c: 86:     TRISA = 0;
   502  000E' 0185               	clrf	5	;volatile
   503  000F'                    l668:
   504                           
   505                           ;main.c: 87:     TRISAbits.TRISA0 = 1;
   506  000F' 1405               	bsf	5,0	;volatile
   507  0010'                    l670:
   508                           
   509                           ;main.c: 88:     TRISAbits.TRISA1 = 1;
   510  0010' 1485               	bsf	5,1	;volatile
   511                           
   512                           ;main.c: 89:     PORTD = 0;
   513  0011' 1283               	bcf	3,5	;RP0=0, select bank0
   514  0012' 1303               	bcf	3,6	;RP1=0, select bank0
   515  0013' 0188               	clrf	8	;volatile
   516                           
   517                           ;main.c: 90:     PORTB = 0;
   518  0014' 0186               	clrf	6	;volatile
   519                           
   520                           ;main.c: 91:     PORTC = 0;
   521  0015' 0187               	clrf	7	;volatile
   522                           
   523                           ;main.c: 92:     PORTE = 0;
   524  0016' 0189               	clrf	9	;volatile
   525                           
   526                           ;main.c: 93:     pot=0;
   527  0017' 0183'              	clrf	_pot
   528  0018'                    l62:
   529  0018' 0008               	return
   530  0019'                    __end_of_config:
   531                           
   532                           	psect	text2
   533  0000'                    __ptext2:	
   534 ;; *************** function _ISR *****************
   535 ;; Defined at:
   536 ;;		line 101 in file "main.c"
   537 ;; Parameters:    Size  Location     Type
   538 ;;		None
   539 ;; Auto vars:     Size  Location     Type
   540 ;;		None
   541 ;; Return value:  Size  Location     Type
   542 ;;                  1    wreg      void 
   543 ;; Registers used:
   544 ;;		wreg, status,2
   545 ;; Tracked objects:
   546 ;;		On entry : 0/0
   547 ;;		On exit  : 0/0
   548 ;;		Unchanged: 0/0
   549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   550 ;;      Params:         0       0       0       0       0
   551 ;;      Locals:         0       0       0       0       0
   552 ;;      Temps:          2       0       0       0       0
   553 ;;      Totals:         2       0       0       0       0
   554 ;;Total ram usage:        2 bytes
   555 ;; Hardware stack levels used:    1
   556 ;; This function calls:
   557 ;;		Nothing
   558 ;; This function is called by:
   559 ;;		Interrupt level 1
   560 ;; This function uses a non-reentrant model
   561 ;;
   562                           
   563                           
   564                           ;psect for function _ISR
   565  0000'                    _ISR:
   566  0000'                    i1l696:
   567                           
   568                           ;main.c: 103:     if (PIR1bits.ADIF == 1) {
   569  0000' 1283               	bcf	3,5	;RP0=0, select bank0
   570  0001' 1303               	bcf	3,6	;RP1=0, select bank0
   571  0002' 1F0C               	btfss	12,6	;volatile
   572  0003' 2800'              	goto	u4_21
   573  0004' 2800'              	goto	u4_20
   574  0005'                    u4_21:
   575  0005' 2800'              	goto	i1l68
   576  0006'                    u4_20:
   577  0006'                    i1l698:
   578                           
   579                           ;main.c: 104:         PORTC = ADRESH;
   580  0006' 081E               	movf	30,w	;volatile
   581  0007' 0087               	movwf	7	;volatile
   582  0008'                    i1l700:
   583                           
   584                           ;main.c: 105:         adc_fin = 0;
   585  0008' 0180'              	clrf	_adc_fin
   586  0009'                    i1l702:
   587                           
   588                           ;main.c: 106:         PIR1bits.ADIF = 0;
   589  0009' 130C               	bcf	12,6	;volatile
   590  000A'                    i1l68:
   591  000A' 0801'              	movf	??_ISR+1,w
   592  000B' 008A               	movwf	10
   593  000C' 0E00'              	swapf	??_ISR,w
   594  000D' 0083               	movwf	3
   595  000E' 0EFE               	swapf	btemp,f
   596  000F' 0E7E               	swapf	btemp,w
   597  0010' 0009               	retfie
   598  0011'                    __end_of_ISR:
   599  007E                     btemp	set	126	;btemp
   600  007E                     wtemp0	set	126
   601                           
   602                           	psect	intentry
   603  0000'                    __pintentry:	
   604                           ;incstack = 0
   605                           ; Regs used in _ISR: [wreg+status,2]
   606                           
   607  0000'                    interrupt_function:
   608  007E                     saved_w	set	btemp
   609  0000' 00FE               	movwf	btemp
   610  0001' 0E03               	swapf	3,w
   611  0002' 0080'              	movwf	??_ISR
   612  0003' 080A               	movf	10,w
   613  0004' 0081'              	movwf	??_ISR+1
   614  0005' 120A' 118A' 2800'  	ljmp	_ISR
   615                           
   616                           	psect	config
   617                           
   618                           ;Config register CONFIG1 @ 0x2007
   619                           ;	Oscillator Selection bits
   620                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
   621                           ;	Watchdog Timer Enable bit
   622                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   623                           ;	Power-up Timer Enable bit
   624                           ;	PWRTE = OFF, PWRT disabled
   625                           ;	RE3/MCLR pin function select bit
   626                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
   627                           ;	Code Protection bit
   628                           ;	CP = OFF, Program memory code protection is disabled
   629                           ;	Data Code Protection bit
   630                           ;	CPD = OFF, Data memory code protection is disabled
   631                           ;	Brown Out Reset Selection bits
   632                           ;	BOREN = ON, BOR enabled
   633                           ;	Internal External Switchover bit
   634                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   635                           ;	Fail-Safe Clock Monitor Enabled bit
   636                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   637                           ;	Low Voltage Programming Enable bit
   638                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   639                           ;	In-Circuit Debugger Mode bit
   640                           ;	DEBUG = 0x1, unprogrammed default
   641  2007                     	org	8199
   642  2007  23D4               	dw	9172
   643                           
   644                           ;Config register CONFIG2 @ 0x2008
   645                           ;	Brown-out Reset Selection bit
   646                           ;	BOR4V = 0x1, unprogrammed default
   647                           ;	Flash Program Memory Self Write Enable bits
   648                           ;	WRT = OFF, Write protection off
   649  2008                     	org	8200
   650  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4       8
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0      24
                                              2 COMMON     2     2      0
                            _conf_ch
                             _config
 ---------------------------------------------------------------------------------
 (1) _config                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _conf_ch                                              2     0      2      24
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _conf_ch
   _config

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      4       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       8       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       8      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Fri Feb 12 01:34:24 2021

                     l62 0018                       u50 000B                       u51 000A  
                     u60 0012                       u61 0011                       u70 002B  
                     u71 002A                       u87 001E                       u97 0038  
                    l710 000B                      l720 0026                      l712 000D  
                    l704 0000                      l722 002B                      l714 0012  
                    l706 0005                      l660 0000                      l724 0034  
                    l716 001A                      l708 0006                      l670 0010  
                    l662 0002                      l726 003D                      l718 0023  
                    l664 0006                      l666 0007                      l668 000F  
                    _ISR 0000                      _pot 0003                     ?_ISR 0000  
                   i1l68 000A                     u4_20 0006                     u4_21 0005  
                   _main 0000                     btemp 007E                     start 0000* 
                  ??_ISR 0000                    ?_main 0000                    _ANSEL 0188  
                  i1l700 0008                    i1l702 0009                    i1l696 0000  
                  i1l698 0006                    _PORTB 0006                    _PORTC 0007  
                  _PORTD 0008                    _PORTE 0009                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    _TRISD 0088  
                  _TRISE 0089                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 0000             __end_of_main 0044  
                 ??_main 0002                   _ADRESH 001E                   _ANSELH 0189  
                 _config 0000                ??_conf_ch 0000                   saved_w 007E  
__end_of__initialization 0004           __pcstackCOMMON 0000               __pmaintext 0000  
             __pintentry 0000                  ?_config 0000                  _adc_fin 0000  
        __size_of_config 0019                _ANSELbits 0188                  __ptext1 0000  
                __ptext2 0000                  _conf_ch 0000*            __size_of_ISR 0011  
   end_of_initialization 0004                _TRISAbits 0085           __end_of_config 0019  
    start_initialization 0000              __end_of_ISR 0011                 ??_config 0002  
            __pbssCOMMON 0000                ___latbits 0002                _conf_ch$0 0000  
               ?_conf_ch 0000        interrupt_function 0000                 _PIR1bits 000C  
             _ADCON0bits 001F            __size_of_main 0044                 _val_pot1 0002  
               _val_pot2 0001               _INTCONbits 000B                 intlevel1 0000* 
